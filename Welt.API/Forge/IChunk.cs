#region Copyright
// COPYRIGHT 2016 JUSTIN COX (CONJI)
#endregion

namespace Welt.API.Forge
{
    /// <summary>
    ///     Interface for Chunk objects.
    /// </summary>
    public interface IChunk
    {
        /// <summary>
        ///     The X location of the chunk in the world.
        /// </summary>
        uint X { get; set; }
        /// <summary>
        ///     The Z location of the chunk in the world.
        /// </summary>
        uint Z { get; set; }

        /// <summary>
        ///     The IChunk found to the north.
        /// </summary>
        IChunk N { get; }
        /// <summary>
        ///     The IChunk found to the east.
        /// </summary>
        IChunk E { get; }
        /// <summary>
        ///     The IChunk found to the south.
        /// </summary>
        IChunk S { get; }
        /// <summary>
        ///     The IChunk found to the west.
        /// </summary>
        IChunk W { get; }

        /// <summary>
        ///     The IChunk found to the northeast.
        /// </summary>
        IChunk Ne { get; }
        /// <summary>
        ///     The IChunk found to the northwest.
        /// </summary>
        IChunk Nw { get; }
        /// <summary>
        ///     The IChunk found to the southeast.
        /// </summary>
        IChunk Se { get; }
        /// <summary>
        ///     The IChunk found to the southwest.
        /// </summary>
        IChunk Sw { get; }

        /// <summary>
        ///     The maximum height values of X;Z coordinates.
        /// </summary>
        int[] HeightMap { get; }
        ///<summary>
        ///     Determines whether or not the IChunk has been modified.
        /// </summary>
        bool IsModified { get; set; }
        /// <summary>
        ///     Gets whether or not the chunk object has been generated by an <see cref="Welt.API.Forge.Generators.IForgeGenerator"/>.
        /// </summary>
        bool IsGenerated { get; set; }
        /// <summary>
        ///     Gets the max height of the chunk. Will vary depending on the <see cref="IWorld"/> that owns it.
        /// </summary>
        int Height { get; }

        /// <summary>
        ///     Gets the block found at the requested location.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        /// <returns></returns>
        (ushort Id, byte Metadata) GetBlock(int x, int y, int z);
        /// <summary>
        ///     Sets the block at the requested location.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        /// <param name="value"></param>
        void SetBlock(int x, int y, int z, ushort id, byte metadata);
        /// <summary>
        ///     Gets the height at the requested X and Z location.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="z"></param>
        /// <returns></returns>
        int GetHeight(int x, int z);
        // these are `int`s so that we can gauge whether or not it wants to tap a relative chunk
        /// <summary>
        ///     Gets the lowest air block in the chunk.
        ///     TODO: change this so that it's not contained in the interface because it's not necessary 
        ///     in the API.
        /// </summary>
        /// <returns></returns>
        int GetLowestNoneBlock();
        /// <summary>
        ///     Initializes the chunk within the world and the chunk manager.
        /// </summary>
        void Initialize(IWorld world);
    }
}